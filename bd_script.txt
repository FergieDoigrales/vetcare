CREATE OR REPLACE FUNCTION update_sector_occupancy()
    RETURNS TRIGGER AS
$$
BEGIN
    RAISE NOTICE 'Trigger: update_sector_occupancy activated for Sector ID: %', COALESCE(NEW.sector_id, OLD.sector_id);


    IF TG_OP = 'INSERT' AND NEW.sector_id IS NOT NULL THEN
        UPDATE Sector
        SET Occupancy = Occupancy + 1
        WHERE ID = NEW.sector_id;


    ELSIF TG_OP = 'DELETE' AND OLD.sector_id IS NOT NULL THEN
        UPDATE Sector
        SET Occupancy = Occupancy - 1
        WHERE ID = OLD.sector_id;


    ELSIF TG_OP = 'UPDATE' THEN

        IF OLD.sector_id IS NULL AND NEW.sector_id IS NOT NULL THEN
            UPDATE Sector
            SET Occupancy = Occupancy + 1
            WHERE ID = NEW.sector_id;

        ELSIF OLD.sector_id IS NOT NULL AND NEW.sector_id IS NULL THEN
            UPDATE Sector
            SET Occupancy = Occupancy - 1
            WHERE ID = OLD.sector_id;

        ELSIF OLD.sector_id IS NOT NULL AND NEW.sector_id IS NOT NULL AND OLD.sector_id <> NEW.sector_id THEN

            UPDATE Sector
            SET Occupancy = Occupancy - 1
            WHERE ID = OLD.sector_id;

            UPDATE Sector
            SET Occupancy = Occupancy + 1
            WHERE ID = NEW.sector_id;
        END IF;
    END IF;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;




CREATE OR REPLACE TRIGGER trigger_update_sector_occupancy
    AFTER INSERT OR DELETE OR UPDATE
    ON Pet
    FOR EACH ROW
EXECUTE FUNCTION update_sector_occupancy();



CREATE OR REPLACE FUNCTION update_sector_availability()
    RETURNS TRIGGER AS
$$
BEGIN

    IF NEW.capacity <= NEW.occupancy THEN
        NEW.is_available := false;
    ELSE
        NEW.is_available := true;
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER trigger_update_sector_availability
    BEFORE UPDATE
    ON Sector
    FOR EACH ROW
EXECUTE FUNCTION update_sector_availability();



CREATE OR REPLACE FUNCTION update_slot_availability()
    RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        UPDATE Available_Slots
        SET Is_Available = FALSE
        WHERE ID = NEW.Slot_ID;
    ELSIF TG_OP = 'DELETE' THEN
        UPDATE Available_Slots
        SET Is_Available = TRUE
        WHERE ID = OLD.Slot_ID;
    END IF;
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_slot_availability
    AFTER INSERT OR DELETE ON Appointment
    FOR EACH ROW
EXECUTE FUNCTION update_slot_availability();


-- проверка вместительности (не оч нужна или заменить потом на isAvailable проверку)
CREATE OR REPLACE FUNCTION check_sector_capacity()
    RETURNS TRIGGER AS
$$
BEGIN
    IF (SELECT COUNT(*) FROM Pet WHERE Sector_ID = NEW.Sector_ID) >=
       (SELECT Capacity FROM Sector WHERE ID = NEW.Sector_ID) THEN
        RAISE EXCEPTION 'Sector capacity exceeded.';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER trigger_check_sector_capacity
    BEFORE INSERT OR UPDATE
    ON Pet
    FOR EACH ROW
EXECUTE FUNCTION check_sector_capacity();



